name: entryTracker CI\CD

on:
  push:
    branches: [ "main" ]

env:
  REGION: "ap-south-1"


jobs:
  Build-and-Test:
    runs-on: ubuntu-latest

    steps:
      # Part 1: Pull the application source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Part 2: Build the application: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the application in the background
      - name: Start app.py
        run: |
          nohup python app.py &

      # Part 3: Run unit tests
      - name: Test the application with curl
        run: |
          echo "Testing the application..."
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" http://localhost:5000)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Expected HTTP 200 but got $RESPONSE"
            cat response.txt
            exit 1
          fi
          echo "Test successful! Application returned HTTP 200."
          echo "Response from the application:"
          cat response.txt
          exit 0

      # Stop the app
      - name: Cleanup
        run: |
          pkill -f app.py || true

  E2E-Test-and-Deploy:
    needs: Build-and-Test
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout App
        uses: actions/checkout@v2

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Download .env from S3
      - name: Download .env file from S3
        run: |
          aws s3 cp s3://entytracker-cicd/.env .

      # Load environment variables
      - name: Load environment variables
        run: |
          set -a
          source .env
          set +a

      # Deploy to Staging: Deploy Instance
      - name: Make scripts executable
        run: |
          sed -i 's/\r$//' scripts/run-instances.sh
          sed -i 's/\r$//' scripts/user-data.sh
          chmod +x scripts/run-instances.sh
      
      - name: Launch EC2 and wait
        run: bash scripts/run-instances.sh -u scripts/user-data.sh

      - name: Attach IAM Role to EC2
        run: |
          echo "Associating IAM Instance Profile..."
          aws ec2 associate-iam-instance-profile \
            --instance-id ${{ env.INSTANCE_ID }} \
            --iam-instance-profile ${{ env.IAM_INSTANCE_PROFILE }}
            --region ${{ env.REGION }}
            
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_PRI_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
          
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts
            
      - name: Deploy with SSH
        run: |
          ssh ubuntu@${{ env.PUBLIC_IP }} '
              cd /home/ubuntu/workspace/entryTracker_CICD && \
              aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin 796973518097.dkr.ecr.${{ env.REGION }}.amazonaws.com && \
              docker compose up -d
          '
