name: entryTracker CI/CD

on:
  push:
    branches: [ "main" ]

env:
  REGION: "ap-south-1"


jobs:
  Build-and-Test:
    runs-on: ubuntu-latest

    steps:
      # Part 1: Pull the application source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Part 2: Build the application: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the application in the background
      - name: Start app.py
        run: |
          nohup python app.py &
          sleep 2
          if ! pgrep -f "python app.py"; then
            echo "Error: Application failed to start."
            exit 1
          fi

      # Part 3: Run unit tests
      - name: Test the application with curl
        run: |
          echo "Testing the application..."
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" http://localhost:5000)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Expected HTTP 200 but got $RESPONSE"
            cat response.txt
            exit 1
          fi
          echo "Test successful! Application returned HTTP 200."
          echo "Response from the application:"
          cat response.txt
          exit 0

      # Stop the app
      - name: Cleanup
        run: |
          pkill -f app.py || true

  E2E-Test-and-Deploy:
    needs: Build-and-Test
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout App
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Download .env and SSH key from S3
      - name: Download .env and SSH key from S3
        run: |
          aws s3 cp s3://entytracker-cicd/.env .
          aws s3 cp s3://entytracker-cicd/barak-SSH-2.pem .

      # Load environment variables
      - name: Load .env file
        uses: aarcangeli/load-dotenv@v1
        with:
          path: '.'
          filenames: '.env'
          expand: true  

      # Set permissions for the SSH key
      - name: Set permissions for SSH key
        run: |
          chmod 400 barak-SSH-2.pem

      # Deploy to Staging: Deploy Instance
      - name: Make scripts executable
        run: |
          sed -i 's/\r$//' scripts/run-instances.sh
          chmod +x scripts/run-instances.sh

      # Run run-instance.sh and userdata.sh
      - name: Launch EC2 and wait
        run: |
          bash scripts/run-instances.sh -u scripts/userdata.sh

      # Wait for 3 minutes
      - name: Wait for 3 minutes
        run: sleep 180

      # Fetch the logs for userdata.sh
      - name: Fetch userdata.sh log
        run: |
          ssh -i barak-SSH-2.pem -o StrictHostKeyChecking=no ubuntu@${{ env.PUBLIC_IP }} "tail -n 15 /tmp/userdata.log"

      # Run e2e-tests.sh on the instance using SSH
      - name: Run E2E Tests on EC2 via SSH
        run: |
          ssh -i barak-SSH-2.pem -o StrictHostKeyChecking=no ubuntu@${{ env.PUBLIC_IP }} "bash /home/ubuntu/workspace/entryTracker_CICD/scripts/e2e-tests.sh"

      # Wait 10 sec
      - name: Wait 10 seconds
        run: sleep 10

      # Fetch the logs for e2e-tests.sh
      - name: Fetch e2e-tests.sh log
        run: |
          ssh -i ${{ env.KEY_ID }} -o StrictHostKeyChecking=no ubuntu@${{ env.PUBLIC_IP }} "tail -n 15 /tmp/e2e_tests.log"

      # Check e2e-tests.sh log for success message
      - name: Check E2E Test Results
        run: |
          LOG_CONTENT=$(ssh -i ${{ env.KEY_ID }} -o StrictHostKeyChecking=no ubuntu@${{ env.PUBLIC_IP }} "cat /tmp/e2e_tests.log")
          echo "$LOG_CONTENT"
          if echo "$LOG_CONTENT" | grep -q "All health checks passed successfully."; then
          echo "E2E tests passed. Proceeding to push to ECR."
            else
          echo "E2E tests failed."
          exit 1
            fi

      # login to ECR
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com

      # Build, tag, and push the Docker image to Amazon ECR
      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
