on:
  push:
    branches: [ "main" ]

env:
  REGION: "ap-south-1"


jobs:
  Build-and-Test:
    runs-on: ubuntu-latest

    steps:
      # Part 1: Pull the application source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Part 2: Build the application: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the application in the background
      - name: Start app.py
        run: |
          nohup python app.py &
          sleep 2
          if ! pgrep -f "python app.py"; then
            echo "Error: Application failed to start."
            exit 1
          fi

      # Part 3: Run unit tests
      - name: Test the application with curl
        run: |
          echo "Testing the application..."
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" http://localhost:5000)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Expected HTTP 200 but got $RESPONSE"
            cat response.txt
            exit 1
          fi
          echo "Test successful! Application returned HTTP 200."
          echo "Response from the application:"
          cat response.txt
          exit 0

      # Stop the app
      - name: Cleanup
        run: |
          pkill -f app.py || true

  E2E-Test-and-Deploy:
    needs: Build-and-Test
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout App
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Download .env from S3
      - name: Download .env file from S3
        run: |
          aws s3 cp s3://entytracker-cicd/.env .

      # Load environment variables
      - name: Load .env file
        uses: aarcangeli/load-dotenv@v1
        with:
          path: '.'
          filenames: '.env'
          expand: true  

      # Deploy to Staging: Deploy Instance
      - name: Make scripts executable
        run: |
          sed -i 's/\r$//' scripts/run-instances.sh
          sed -i 's/\r$//' scripts/userdata.sh
          chmod +x scripts/run-instances.sh
      
      # Run run-instance.sh and user-da
      - name: Launch EC2 and wait
        run: bash scripts/run-instances.sh -u scripts/userdata.sh

      - name: Monitor Container Health
        run: |
          echo "Monitoring container health using SSM..."
          
          # Define retry settings
          MAX_RETRIES=60 # 5 minutes (60 retries with 5-second interval)
          RETRY_INTERVAL=5 # 5 seconds between retries
      
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES: Checking health of containers..."
            
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "${{ env.INSTANCE_ID }}" \
              --document-name "AWS-RunShellScript" \
              --comment "Check Docker container health" \
              --parameters commands=[
                "sudo docker inspect --format='{{json .State.Health}}' flask-app || echo 'No health check configured for flask-app'",
                "sudo docker inspect --format='{{json .State.Health}}' mysql-db || echo 'No health check configured for mysql-db'"
              ] \
              --region "${{ env.REGION }}" \
              --query "Command.CommandId" \
              --output text)
      
            echo "Waiting for SSM command to complete..."
            aws ssm wait command-executed \
              --instance-id "${{ env.INSTANCE_ID }}" \
              --command-id "$COMMAND_ID" \
              --region "${{ env.REGION }}"
      
            OUTPUT=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ env.INSTANCE_ID }}" \
              --region "${{ env.REGION }}" \
              --query "StandardOutputContent" \
              --output text)
      
            echo "Command output: $OUTPUT"
      
            # Check for healthy status
            if echo "$OUTPUT" | grep -q '"Status":"healthy"'; then
              echo "Containers are healthy!"
              break
            fi
      
            if [ "$i" -eq "$MAX_RETRIES" ]; then
              echo "Error: Containers did not become healthy within the timeout period."
              exit 1
            fi
      
            echo "Containers are not healthy yet. Retrying in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL
          done



