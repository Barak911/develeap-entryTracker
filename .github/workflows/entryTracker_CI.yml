name: entryTracker_CI-CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CICD:
    runs-on: ubuntu-latest

    steps:
      # Part 1: Pull the application source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Part 2: Build the application: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the application in the background
      - name: Start app.py
        run: |
          nohup python app.py &

      # Part 3: Run unit tests
      - name: Test the application with curl
        run: |
          echo "Waiting for the application to start..."
          sleep 5

          echo "Testing the application..."
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" http://localhost:5000)

          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Expected HTTP 200 but got $RESPONSE"
            cat response.txt
            exit 1
          fi

          echo "Test successful! Application returned HTTP 200."
          echo "Response from the application:"
          cat response.txt

      # Stop the app
      - name: Cleanup
        run: |
          pkill -f app.py || true

      # Part 4: Run E2E Tests
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy to Staging
        run: |
          # Launch EC2 instance
          echo "Launching EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-053b12d3152c0cc71 \
            --count 1 \
            --instance-type t3a.small \
            --iam-instance-profile Name=barak_CICD_AutomationRole \
            --security-group-ids sg-09fae402d9e4456db \
            --subnet-id subnet-0535524901695176d \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Instance ID: $INSTANCE_ID"

          # Wait for the instance to be ready
          echo "Waiting for the instance to be ready..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID


          # Install and start Docker
          echo "Configuring Docker on EC2 instance..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Install Docker and Docker Compose" \
            --parameters commands=[
              "yum update -y",
              "yum install -y docker",
              "systemctl start docker",
              "curl -L 'https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64' -o /usr/local/bin/docker-compose",
              "chmod +x /usr/local/bin/docker-compose",
              "docker compose version"
            ] \
            --region ap-south-1
      - name: Build and Staging Tests
        run: |
          # Execute E2E test script
          echo "Executing E2E test script..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands=[
              "cleanup() {",
              "  echo 'Cleaning up Docker Compose stack...'",
              "  docker compose down",
              "}",
              "trap cleanup EXIT",
              "echo 'Starting Docker Compose...'",
              "docker compose up -d",
              "echo 'Waiting for the application to be ready...'",
              "MAX_RETRIES=15",
              "RETRY_INTERVAL=1",
              "for i in $(seq 1 $MAX_RETRIES); do",
              "  if curl -s http://localhost:5000 > /dev/null; then",
              "    echo 'Application is up and running!'",
              "    break",
              "  fi",
              "  echo 'Retry $i/$MAX_RETRIES: Application not ready yet. Retrying in $RETRY_INTERVAL second(s)...'",
              "  sleep $RETRY_INTERVAL",
              "done",
              "if ! curl -s http://localhost:5000 > /dev/null; then",
              "  echo 'Error: Application did not start within the expected time.'",
              "  docker compose logs",
              "  exit 1",
              "fi"
            ] \
            --region ap-south-1


          # Terminate EC2 instance
          echo "Terminating EC2 instance..."
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
          
