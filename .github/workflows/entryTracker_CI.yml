name: entryTracker CI\CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


permissions:
  contents: read

env:
  IAM_INSTANCE_PROFILE: barak_CICD_AutomationRole
  AWS_REGION: ap-south-1
  INSTANCE_TYPE: t3a.small
  KEY_NAME: barak-SSH-2
  SECURITY_GROUP_ID: sg-09fae402d9e4456db
  SUBNET_ID: subnet-0535524901695176d

jobs:
  CICD:
    runs-on: ubuntu-latest

    steps:
      # Part 1: Pull the application source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Part 2: Build the application: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the application in the background
      - name: Start app.py
        run: |
          nohup python app.py &

      # Part 3: Run unit tests
      - name: Test the application with curl
        run: |
          echo "Waiting for the application to start..."
          sleep 5
          echo "Testing the application..."
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" http://localhost:5000)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Expected HTTP 200 but got $RESPONSE"
            cat response.txt
            exit 1
          fi
          echo "Test successful! Application returned HTTP 200."
          echo "Response from the application:"
          cat response.txt

      # Stop the app
      - name: Cleanup
        run: |
          pkill -f app.py || true

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Part 4: Deploy to Staging - Step 1: Deploy Instance
      - name: Deploy Instance
        id: deploy_instance
        run: |
          echo "Launching EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-053b12d3152c0cc71 \
            --count 1 \
            --instance-type $INSTANCE_TYPE \
            --key-name $KEY_NAME \
            --iam-instance-profile Name=$IAM_INSTANCE_PROFILE \
            --security-group-ids $SECURITY_GROUP_ID \
            --subnet-id $SUBNET_ID \
            --associate-public-ip-address \
            --region $AWS_REGION \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "Instance ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          echo "Waiting for the instance to reach 'running' state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region $AWS_REGION
          echo "Instance is now in 'running' state."

          echo "Waiting for the instance to pass at least two status checks..."
          while true; do
            SYSTEM_STATUS=$(aws ec2 describe-instance-status \
              --instance-id $INSTANCE_ID \
              --region $AWS_REGION \
              --query 'InstanceStatuses[0].SystemStatus.Status' \
              --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status \
              --instance-id $INSTANCE_ID \
              --region $AWS_REGION \
              --query 'InstanceStatuses[0].InstanceStatus.Status' \
              --output text)
            if [ "$SYSTEM_STATUS" = "ok" ] && [ "$INSTANCE_STATUS" = "ok" ]; then
              echo "Instance passed two status checks and is ready."
              break
            fi
            echo "Waiting for status checks to pass..."
            sleep 5
          done

      # Part 5: Deploy to Staging - Step 2: Install Docker
      - name: Install Docker via SSM
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Install Docker" \
            --parameters commands=["sudo yum update -y","sudo amazon-linux-extras install docker -y","sudo service docker start","sudo usermod -aG docker ec2-user"] \
            --query "Command.CommandId" \
            --output text)
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      - name: Docker compose up and tests
        run: |
          # Execute E2E test script
          echo "Executing E2E test script..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands=["echo 'Starting Docker Compose...'","docker compose up -d","echo 'Waiting for the application to be ready...'","MAX_RETRIES=15","RETRY_INTERVAL=1","for i in $(seq 1 $MAX_RETRIES); do","  if curl -s http://localhost:5000 > /dev/null; then","    echo 'Application is up and running!'","    break","  fi","  echo 'Retry $i/$MAX_RETRIES: Application not ready yet. Retrying in $RETRY_INTERVAL second(s)...'","  sleep $RETRY_INTERVAL","done","if ! curl -s http://localhost:5000 > /dev/null; then","  echo 'Error: Application did not start within the expected time.'","  docker compose logs","  exit 1","fi"] \
            --region ap-south-1
