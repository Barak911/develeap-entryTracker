name: entryTracker_CI-CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CICD:
    runs-on: ubuntu-latest

    steps:
      # Part 1: Pull the application source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Part 2: Build the application: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run the application in the background
      - name: Start app.py
        run: |
          nohup python app.py &

      # Part 3: Run unit tests
      - name: Test the application with curl
        run: |
          echo "Waiting for the application to start..."
          sleep 5
          echo "Testing the application..."
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" http://localhost:5000)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Expected HTTP 200 but got $RESPONSE"
            cat response.txt
            exit 1
          fi
          echo "Test successful! Application returned HTTP 200."
          echo "Response from the application:"
          cat response.txt

      # Stop the app
      - name: Cleanup
        run: |
          pkill -f app.py || true

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Part 4: Deploy to Staging - Step 1: Deploy Instance
      - name: Deploy Instance
        id: deploy_instance
        run: |
          echo "Launching EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-053b12d3152c0cc71 \
            --count 1 \
            --instance-type t3a.small \
            --iam-instance-profile Name=barak_CICD_AutomationRole \
            --security-group-ids sg-09fae402d9e4456db \
            --subnet-id subnet-0535524901695176d \
            --associate-public-ip-address \
            --region ap-south-1 \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "Instance ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          echo "Waiting for the instance to reach 'running' state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ap-south-1
          echo "Instance is now in 'running' state."

          echo "Waiting for the instance to pass at least two status checks..."
          while true; do
            SYSTEM_STATUS=$(aws ec2 describe-instance-status \
              --instance-id $INSTANCE_ID \
              --region ap-south-1 \
              --query 'InstanceStatuses[0].SystemStatus.Status' \
              --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status \
              --instance-id $INSTANCE_ID \
              --region ap-south-1 \
              --query 'InstanceStatuses[0].InstanceStatus.Status' \
              --output text)
            if [ "$SYSTEM_STATUS" = "ok" ] && [ "$INSTANCE_STATUS" = "ok" ]; then
              echo "Instance passed two status checks and is ready."
              break
            fi
            echo "Waiting for status checks to pass..."
            sleep 5
          done

      # Part 5: Deploy to Staging - Step 2: Install Docker
      - name: Install Docker
        run: |
          echo "Configuring Docker on EC2 instance..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Install Docker and Docker Compose" \
            --parameters '{"commands":["yum update -y","yum install -y docker","systemctl start docker","curl -L https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose","chmod +x /usr/local/bin/docker-compose","docker --version","docker compose version"]}' \
            --region ap-south-1 \
            --query "Command.CommandId" \
            --output text)
          echo "Command ID: $COMMAND_ID"

          echo "Waiting for the Docker installation command to complete..."
          sleep 10

          OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --region ap-south-1 \
            --query "StandardOutputContent" \
            --output text)
          echo "Docker installation output:"
          echo "$OUTPUT"

